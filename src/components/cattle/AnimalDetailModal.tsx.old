// src/components/cattle/AnimalDetailModal.tsx - MODAL INDIVIDUAL PREMIUM
'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, 
  Edit,
  Calendar,
  TrendingUp,
  Milk,
  Heart,
  Activity,
  Info,
  Plus,
  MapPin,
  Clock,
  Package,
  Stethoscope
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import useRanchOSStore from '@/store';
import ProductionChart from '@/components/analytics/ProductionChart';
import type { Animal } from '@/types';

interface AnimalDetailModalProps {
  animal: Animal;
  isOpen: boolean;
  onClose: () => void;
  onEditAnimal?: (animal: Animal) => void;
  onRegisterProduction?: (animal: Animal) => void;
}

export default function AnimalDetailModal({ 
  animal, 
  isOpen, 
  onClose, 
  onEditAnimal, 
  onRegisterProduction 
}: AnimalDetailModalProps) {
  const [activeTab, setActiveTab] = useState('overview');
  const { getMilkProductionsByAnimal } = useRanchOSStore();

  if (!isOpen) return null;

  // Obtener producciones específicas del animal
  const animalProductions = getMilkProductionsByAnimal(animal.id);

  // Calcular estadísticas del animal
  const getAnimalStats = () => {
    const totalProductions = animalProductions.length;
    const totalLiters = animalProductions.reduce((sum, p) => sum + p.quantity, 0);
    const avgDaily = totalProductions > 0 ? totalLiters / totalProductions : 0;
    
    // Últimos 7 días
    const recentProductions = animalProductions.slice(-7);
    const recentAvg = recentProductions.length > 0 
      ? recentProductions.reduce((sum, p) => sum + p.quantity, 0) / recentProductions.length 
      : 0;

    return {
      totalProductions,
      totalLiters,
      avgDaily,
      recentAvg,
      trend: recentAvg > avgDaily ? 'up' : recentAvg < avgDaily ? 'down' : 'stable'
    };
  };

  const stats = getAnimalStats();

  // Calcular edad
  const getAge = () => {
    if (!animal.birthDate) return 'No definida';
    const birthDate = new Date(animal.birthDate);
    const today = new Date();
    const months = (today.getFullYear() - birthDate.getFullYear()) * 12 + 
                   (today.getMonth() - birthDate.getMonth());
    const years = Math.floor(months / 12);
    const remainingMonths = months % 12;
    
    if (years === 0) return `${remainingMonths} ${remainingMonths === 1 ? 'mes' : 'meses'}`;
    if (remainingMonths === 0) return `${years} ${years === 1 ? 'año' : 'años'}`;
    return `${years}a ${remainingMonths}m`;
  };

  // Estado de salud badge
  const getHealthBadge = (status?: string) => {
    switch(status) {
      case 'excellent': return { text: 'Excelente', color: 'bg-green-100 text-green-800' };
      case 'good': return { text: 'Buena', color: 'bg-blue-100 text-blue-800' };
      case 'fair': return { text: 'Regular', color: 'bg-yellow-100 text-yellow-800' };
      case 'poor': return { text: 'Requiere Atención', color: 'bg-red-100 text-red-800' };
      default: return { text: 'Sin evaluar', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const healthInfo = getHealthBadge(animal.healthStatus);

  const tabs = [
    { id: 'overview', label: 'Información', icon: Info },
    { id: 'production', label: 'Producción', icon: Milk },
    { id: 'health', label: 'Salud', icon: Heart },
  ];

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
          onClick={onClose}
        />

        <div className="flex min-h-full items-center justify-center p-4">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="relative w-full max-w-4xl bg-white rounded-xl shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b bg-gradient-to-r from-gray-50 to-white">
              <div className="flex items-center space-x-4">
                <div className={`w-16 h-16 rounded-full bg-gradient-to-br ${
                  animal.sex === 'female' ? 'from-pink-400 to-purple-600' : 'from-blue-400 to-cyan-600'
                } flex items-center justify-center shadow-lg`}>
                  <Package className="h-8 w-8 text-white" />
                </div>
                
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">
                    {animal.name || animal.tag}
                  </h2>
                  <div className="flex items-center space-x-3 mt-1">
                    <Badge variant="outline">{animal.tag}</Badge>
                    <span className="text-sm text-gray-600">
                      {animal.sex === 'female' ? '♀ Hembra' : '♂ Macho'}
                    </span>
                    {animal.breed && (
                      <>
                        <span className="text-gray-400">•</span>
                        <span className="text-sm text-gray-600">{animal.breed}</span>
                      </>
                    )}
                  </div>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                {onEditAnimal && (
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => onEditAnimal(animal)}
                  >
                    <Edit className="h-4 w-4 mr-2" />
                    Editar
                  </Button>
                )}
                
                <button
                  onClick={onClose}
                  className="text-gray-400 hover:text-gray-500 transition-colors"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            {/* Tabs */}
            <div className="border-b">
              <div className="flex space-x-8 px-6">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center space-x-2 py-4 border-b-2 transition-colors ${
                      activeTab === tab.id
                        ? 'border-primary-500 text-primary-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <tab.icon className="h-4 w-4" />
                    <span className="font-medium">{tab.label}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Content */}
            <div className="p-6 max-h-96 overflow-y-auto">
              <AnimatePresence mode="wait">
                {/* Tab: Información General */}
                {activeTab === 'overview' && (
                  <motion.div
                    key="overview"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className="space-y-6"
                  >
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* Información Básica */}
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg">Datos Básicos</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                          <div>
                            <span className="text-sm font-medium text-gray-600">Etiqueta:</span>
                            <p className="font-medium">{animal.tag}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">Nombre:</span>
                            <p className="font-medium">{animal.name || 'Sin nombre'}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">Raza:</span>
                            <p className="font-medium">{animal.breed || 'No especificada'}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-600">Edad:</span>
                            <p className="font-medium flex items-center">
                              <Clock className="h-4 w-4 mr-1 text-gray-400" />
                              {getAge()}
                            </p>
                          </div>
                          {animal.weight && (
                            <div>
                              <span className="text-sm font-medium text-gray-600">Peso:</span>
                              <p className="font-medium">{animal.weight} kg</p>
                            </div>
                          )}
                        </CardContent>
                      </Card>

                      {/* Estado de Salud */}
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg flex items-center">
                            <Heart className="h-5 w-5 mr-2 text-red-500" />
                            Estado de Salud
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-600">Estado actual:</span>
                            <Badge className={healthInfo.color}>
                              {healthInfo.text}
                            </Badge>
                          </div>
                          
                          <div className="space-y-2">
                            <span className="text-sm font-medium text-gray-600">Historial reciente:</span>
                            <div className="text-sm text-gray-500">
                              <p>• Última revisión: Hace 15 días</p>
                              <p>• Vacunación: Al día</p>
                              <p>• Tratamientos: Ninguno activo</p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>

                    {/* Ubicación */}
                    {animal.location && (
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg flex items-center">
                            <MapPin className="h-5 w-5 mr-2 text-green-500" />
                            Ubicación en el Rancho
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <p className="text-gray-700">{animal.location}</p>
                        </CardContent>
                      </Card>
                    )}
                  </motion.div>
                )}

                {/* Tab: Producción */}
                {activeTab === 'production' && (
                  <motion.div
                    key="production"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className="space-y-6"
                  >
                    {/* Estadísticas de Producción */}
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <Card>
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-blue-600">
                            {stats.totalLiters.toFixed(1)}L
                          </div>
                          <p className="text-sm text-gray-600 mt-1">Total Acumulado</p>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-green-600">
                            {stats.avgDaily.toFixed(1)}L
                          </div>
                          <p className="text-sm text-gray-600 mt-1">Promedio Diario</p>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-purple-600">
                            {stats.recentAvg.toFixed(1)}L
                          </div>
                          <p className="text-sm text-gray-600 mt-1">Últimos 7 días</p>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardContent className="p-4 text-center">
                          <div className="text-2xl font-bold text-orange-600">
                            {stats.totalProductions}
                          </div>
                          <p className="text-sm text-gray-600 mt-1">Registros</p>
                        </CardContent>
                      </Card>
                    </div>

                    {/* Gráfico de Producción Individual */}
                    {animalProductions.length > 0 ? (
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center justify-between">
                            <span>Historial de Producción</span>
                            {onRegisterProduction && (
                              <Button 
                                onClick={() => onRegisterProduction(animal)}
                                className="bg-gradient-to-r from-blue-500 to-cyan-600"
                              >
                                <Plus className="h-4 w-4 mr-2" />
                                Registrar Producción
                              </Button>
                            )}
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="h-64">
                            <ProductionChart 
                              productions={animalProductions}
                              days={14}
                              type="line"
                            />
                          </div>
                        </CardContent>
                      </Card>
                    ) : (
                      <Card>
                        <CardContent className="text-center py-12">
                          <Milk className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                          <h3 className="text-lg font-medium text-gray-900 mb-2">
                            Sin registros de producción
                          </h3>
                          <p className="text-gray-600 mb-6">
                            Comienza a registrar la producción diaria de leche para este animal
                          </p>
                          {onRegisterProduction && (
                            <Button 
                              onClick={() => onRegisterProduction(animal)}
                              className="bg-gradient-to-r from-blue-500 to-cyan-600"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Primer Registro
                            </Button>
                          )}
                        </CardContent>
                      </Card>
                    )}
                  </motion.div>
                )}

                {/* Tab: Salud */}
                {activeTab === 'health' && (
                  <motion.div
                    key="health"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className="space-y-6"
                  >
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Stethoscope className="h-5 w-5 mr-2" />
                          Historial Médico
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="text-center py-8">
                          <Heart className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                          <h3 className="font-medium text-gray-900 mb-2">Registro médico</h3>
                          <p className="text-sm text-gray-600 mb-4">
                            Los registros veterinarios y de salud se mostrarán aquí
                          </p>
                          <Button variant="outline">
                            <Plus className="h-4 w-4 mr-2" />
                            Agregar Registro Médico
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>
      </div>
    </AnimatePresence>
  );
}