// src/modules/dynamic-models/localization/adapters/UnitsAdapter.ts
import { UnitSystem } from '../../types/base';

export type WeightUnit = 'kg' | 'lb' | 'arroba' | 'ton';
export type AreaUnit = 'hectare' | 'acre' | 'm2' | 'km2';
export type VolumeUnit = 'liter' | 'gallon' | 'm3';
export type DistanceUnit = 'meter' | 'km' | 'mile' | 'yard';

export class UnitsAdapter {
  // Weight conversions to base unit (kg)
  private static weightToKg: Record<WeightUnit, number> = {
    'kg': 1,
    'lb': 0.453592,
    'arroba': 15, // Brazilian unit
    'ton': 1000
  };

  // Area conversions to base unit (hectare)
  private static areaToHectare: Record<AreaUnit, number> = {
    'hectare': 1,
    'acre': 0.404686,
    'm2': 0.0001,
    'km2': 100
  };

  // Volume conversions to base unit (liter)
  private static volumeToLiter: Record<VolumeUnit, number> = {
    'liter': 1,
    'gallon': 3.78541,
    'm3': 1000
  };

  // Distance conversions to base unit (meter)
  private static distanceToMeter: Record<DistanceUnit, number> = {
    'meter': 1,
    'km': 1000,
    'mile': 1609.34,
    'yard': 0.9144
  };

  /**
   * Convert weight between units
   */
  static convertWeight(value: number, from: WeightUnit, to: WeightUnit): number {
    if (from === to) return value;
    
    // Convert to kg first, then to target unit
    const inKg = value * this.weightToKg[from];
    return inKg / this.weightToKg[to];
  }

  /**
   * Convert area between units
   */
  static convertArea(value: number, from: AreaUnit, to: AreaUnit): number {
    if (from === to) return value;
    
    const inHectare = value * this.areaToHectare[from];
    return inHectare / this.areaToHectare[to];
  }

  /**
   * Convert volume between units
   */
  static convertVolume(value: number, from: VolumeUnit, to: VolumeUnit): number {
    if (from === to) return value;
    
    const inLiter = value * this.volumeToLiter[from];
    return inLiter / this.volumeToLiter[to];
  }

  /**
   * Convert distance between units
   */
  static convertDistance(value: number, from: DistanceUnit, to: DistanceUnit): number {
    if (from === to) return value;
    
    const inMeter = value * this.distanceToMeter[from];
    return inMeter / this.distanceToMeter[to];
  }

  /**
   * Get appropriate units for a country
   */
  static getCountryUnits(country: string): {
    weight: WeightUnit;
    area: AreaUnit;
    volume: VolumeUnit;
    distance: DistanceUnit;
  } {
    const countryUnits: Record<string, any> = {
      'BR': { weight: 'arroba', area: 'hectare', volume: 'liter', distance: 'km' },
      'CO': { weight: 'kg', area: 'hectare', volume: 'liter', distance: 'km' },
      'MX': { weight: 'kg', area: 'hectare', volume: 'liter', distance: 'km' },
      'ES': { weight: 'kg', area: 'hectare', volume: 'liter', distance: 'km' },
      'US': { weight: 'lb', area: 'acre', volume: 'gallon', distance: 'mile' }
    };

    return countryUnits[country] || countryUnits['CO'];
  }

  /**
   * Format weight with unit
   */
  static formatWeight(value: number, unit: WeightUnit, decimals: number = 2): string {
    const formatted = value.toFixed(decimals);
    const unitLabels: Record<WeightUnit, string> = {
      'kg': 'kg',
      'lb': 'lb',
      'arroba': '@',
      'ton': 't'
    };
    return `${formatted} ${unitLabels[unit]}`;
  }

  /**
   * Convert cattle-specific measurements
   */
  static convertCattleMeasurements(data: any, fromSystem: UnitSystem, toSystem: UnitSystem): any {
    if (fromSystem === toSystem) return data;

    const converted = { ...data };

    // Weight conversions
    if (data.weight && fromSystem === 'imperial' && toSystem === 'metric') {
      converted.weight = this.convertWeight(data.weight, 'lb', 'kg');
    } else if (data.weight && fromSystem === 'metric' && toSystem === 'imperial') {
      converted.weight = this.convertWeight(data.weight, 'kg', 'lb');
    }

    // Area conversions
    if (data.area && fromSystem === 'imperial' && toSystem === 'metric') {
      converted.area = this.convertArea(data.area, 'acre', 'hectare');
    } else if (data.area && fromSystem === 'metric' && toSystem === 'imperial') {
      converted.area = this.convertArea(data.area, 'hectare', 'acre');
    }

    return converted;
  }

  /**
   * Calculate stocking density
   */
  static calculateStockingDensity(
    animalCount: number,
    area: number,
    areaUnit: AreaUnit,
    outputUnit: 'animals/hectare' | 'animals/acre' = 'animals/hectare'
  ): number {
    const areaInHectares = this.convertArea(area, areaUnit, 'hectare');
    const density = animalCount / areaInHectares;

    if (outputUnit === 'animals/acre') {
      return density * 0.404686; // Convert hectare to acre
    }

    return density;
  }

  /**
   * Convert feed measurements
   */
  static convertFeedAmount(
    amount: number,
    fromUnit: WeightUnit | VolumeUnit,
    toUnit: WeightUnit | VolumeUnit,
    feedDensity: number = 0.65 // kg/liter default for grain
  ): number {
    // If both are weight units
    if (fromUnit in this.weightToKg && toUnit in this.weightToKg) {
      return this.convertWeight(amount, fromUnit as WeightUnit, toUnit as WeightUnit);
    }

    // If both are volume units
    if (fromUnit in this.volumeToLiter && toUnit in this.volumeToLiter) {
      return this.convertVolume(amount, fromUnit as VolumeUnit, toUnit as VolumeUnit);
    }

    // Convert between weight and volume using density
    if (fromUnit in this.weightToKg && toUnit in this.volumeToLiter) {
      const kg = this.convertWeight(amount, fromUnit as WeightUnit, 'kg');
      const liters = kg / feedDensity;
      return this.convertVolume(liters, 'liter', toUnit as VolumeUnit);
    }

    if (fromUnit in this.volumeToLiter && toUnit in this.weightToKg) {
      const liters = this.convertVolume(amount, fromUnit as VolumeUnit, 'liter');
      const kg = liters * feedDensity;
      return this.convertWeight(kg, 'kg', toUnit as WeightUnit);
    }

    return amount; // If conversion not possible
  }
}

export default UnitsAdapter;