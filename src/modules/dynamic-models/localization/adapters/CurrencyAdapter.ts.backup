// src/modules/dynamic-models/localization/adapters/CurrencyAdapter.ts
import { CurrencyCode } from '../../types/base';

export class CurrencyAdapter {
  private static exchangeRates: Record<string, Record<string, number>> = {
    'USD': {
      'COP': 4000,
      'MXN': 17,
      'EUR': 0.85,
      'BRL': 5
    },
    'COP': {
      'USD': 0.00025,
      'MXN': 0.00425,
      'EUR': 0.0002125,
      'BRL': 0.00125
    },
    'MXN': {
      'USD': 0.0588,
      'COP': 235.29,
      'EUR': 0.05,
      'BRL': 0.294
    },
    'EUR': {
      'USD': 1.176,
      'COP': 4705.88,
      'MXN': 20,
      'BRL': 5.88
    },
    'BRL': {
      'USD': 0.2,
      'COP': 800,
      'MXN': 3.4,
      'EUR': 0.17
    }
  };

  /**
   * Convert amount from one currency to another
   */
  static convert(
    amount: number,
    from: CurrencyCode | string,
    to: CurrencyCode | string,
    customRates?: Record<string, Record<string, number>>
  ): number {
    if (from === to) return amount;

    const rates = customRates || this.exchangeRates;
    const rate = rates[from]?.[to];

    if (!rate) {
      console.warn(`No exchange rate found for ${from} to ${to}`);
      return amount;
    }

    return amount * rate;
  }

  /**
   * Get exchange rate between two currencies
   */
  static getRate(from: CurrencyCode | string, to: CurrencyCode | string): number | null {
    if (from === to) return 1;
    return this.exchangeRates[from]?.[to] || null;
  }

  /**
   * Update exchange rates (e.g., from API)
   */
  static updateRates(newRates: Record<string, Record<string, number>>): void {
    this.exchangeRates = { ...this.exchangeRates, ...newRates };
  }

  /**
   * Format currency amount with proper symbol and locale
   */
  static format(amount: number, currency: CurrencyCode, locale?: string): string {
    const locales: Record<CurrencyCode, string> = {
      'COP': 'es-CO',
      'MXN': 'es-MX',
      'EUR': 'es-ES',
      'USD': 'en-US',
      'BRL': 'pt-BR'
    };

    return new Intl.NumberFormat(locale || locales[currency], {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }

  /**
   * Parse currency string to number
   */
  static parse(value: string, currency?: CurrencyCode): number {
    // Remove currency symbols and separators
    const cleanValue = value
      .replace(/[R$€$,.\s]/g, '')
      .replace(/[^\d-]/g, '');
    
    return parseFloat(cleanValue) || 0;
  }

  /**
   * Get currency symbol
   */
  static getSymbol(currency: CurrencyCode): string {
    const symbols: Record<CurrencyCode, string> = {
      'COP': '$',
      'MXN': '$',
      'EUR': '€',
      'USD': '$',
      'BRL': 'R$'
    };
    return symbols[currency] || currency;
  }

  /**
   * Convert array of monetary values
   */
  static convertArray(
    values: number[],
    from: CurrencyCode,
    to: CurrencyCode
  ): number[] {
    if (from === to) return values;
    
    const rate = this.getRate(from, to);
    if (!rate) return values;
    
    return values.map(value => value * rate);
  }

  /**
   * Convert object with monetary properties
   */
  static convertObject<T extends Record<string, any>>(
    obj: T,
    fields: string[],
    from: CurrencyCode,
    to: CurrencyCode
  ): T {
    if (from === to) return obj;
    
    const result = { ...obj };
    const rate = this.getRate(from, to);
    
    if (!rate) return result;
    
    fields.forEach(field => {
      if (typeof result[field] === 'number') {
        (result as any)[field] = (result as any)[field] * rate;
      }
    });
    
    return result;
  }
}

export default CurrencyAdapter;