'use client';
'use client';
import Image from 'next/image';
// src/app/profile/page.tsx
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ArrowLeft, 
  Save, 
  User, 
  Building2, 
  Bell, 
  CreditCard,
  Camera,
  Plus,
  MapPin,
  Phone,
  Mail,
  Shield,
  Zap,
  Check,
  Edit2,
  Trash2,
  ChevronRight,
  AlertCircle,
  Clock,
  Settings,
  LogOut,
  Upload,
  File,
  Users
} from 'lucide-react';

// TypeScript interfaces for component props
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode;
  variant?: 'default' | 'outline';
  className?: string;
}

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  className?: string;
}

interface LabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
  children: React.ReactNode;
  className?: string;
}

interface CardProps {
  children: React.ReactNode;
  className?: string;
}

interface BadgeProps {
  children: React.ReactNode;
  className?: string;
}

interface TabsProps {
  value?: string;
  onValueChange?: (value: string) => void;
  children: React.ReactNode;
  className?: string;
}

interface TabsListProps {
  children: React.ReactNode;
  className?: string;
  activeTab?: string;
  onTabChange?: (value: string) => void;
}

interface TabsTriggerProps {
  value: string;
  children: React.ReactNode;
  className?: string;
  activeTab?: string;
  onTabChange?: (value: string) => void;
}

interface TabsContentProps {
  value: string;
  children: React.ReactNode;
  activeTab?: string;
}

// Mock components (ya que no tenemos acceso a los componentes reales)
const Button: React.FC<ButtonProps> = ({ children, variant = 'default', onClick, disabled, className = '', ...props }) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`inline-flex items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-900 disabled:pointer-events-none disabled:opacity-50 ${
      variant === 'outline' 
        ? 'border border-gray-300 bg-white hover:bg-gray-50' 
        : 'bg-green-600 text-white hover:bg-green-700'
    } ${className}`}
    {...props}
  >
    {children}
  </button>
);

const Input: React.FC<InputProps> = ({ className = '', ...props }) => (
  <input
    className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    {...props}
  />
);

const Label: React.FC<LabelProps> = ({ children, className = '', ...props }) => (
  <label className={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}>
    {children}
  </label>
);

const Card: React.FC<CardProps> = ({ children, className = '' }) => (
  <div className={`rounded-lg border bg-white shadow-sm ${className}`}>{children}</div>
);

const CardHeader: React.FC<CardProps> = ({ children, className = '' }) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>{children}</div>
);

const CardTitle: React.FC<CardProps> = ({ children, className = '' }) => (
  <h3 className={`text-2xl font-semibold leading-none tracking-tight ${className}`}>{children}</h3>
);

const CardDescription: React.FC<CardProps> = ({ children, className = '' }) => (
  <p className={`text-sm text-gray-600 ${className}`}>{children}</p>
);

const CardContent: React.FC<CardProps> = ({ children, className = '' }) => (
  <div className={`p-6 pt-0 ${className}`}>{children}</div>
);

const Badge: React.FC<BadgeProps> = ({ children, className = '' }) => (
  <span className={`inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors ${className}`}>
    {children}
  </span>
);

// Tabs components
const Tabs: React.FC<TabsProps> = ({ value, onValueChange, children, className = '' }) => {
  const [activeTab, setActiveTab] = useState(value || 'profile');
  
  const handleTabChange = (newValue: string) => {
    setActiveTab(newValue);
    onValueChange?.(newValue);
  };

  return (
    <div className={className}>
      {React.Children.map(children, child =>
        React.isValidElement(child) ? React.cloneElement(child as React.ReactElement<any>, { activeTab, onTabChange: handleTabChange }) : child
      )}
    </div>
  );
};

const TabsList: React.FC<TabsListProps> = ({ children, className = '', activeTab, onTabChange }) => (
  <div className={`inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500 ${className}`}>
    {React.Children.map(children, child =>
      React.isValidElement(child) ? React.cloneElement(child as React.ReactElement<any>, { activeTab, onTabChange }) : child
    )}
  </div>
);

const TabsTrigger: React.FC<TabsTriggerProps> = ({ value, children, className = '', activeTab, onTabChange }) => {
  const isActive = activeTab === value;
  return (
    <button
      onClick={() => onTabChange?.(value)}
      className={`inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${
        isActive ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-700 hover:text-gray-900'
      } ${className}`}
    >
      {children}
    </button>
  );
};

const TabsContent: React.FC<TabsContentProps> = ({ value, children, activeTab }) => {
  if (value !== activeTab) return null;
  return <div className="mt-2">{children}</div>;
};

// 🎨 Componente Avatar Upload Premium
// Definir la interfaz para AvatarUpload
interface AvatarUploadProps {
  currentAvatar?: string;
  onAvatarChange: (avatarUrl: string) => void;
}


const AvatarUpload: React.FC<AvatarUploadProps> = ({ currentAvatar, onAvatarChange }) => {
  const [preview, setPreview] = useState<string | undefined>(currentAvatar);
  const [isHovering, setIsHovering] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const result = reader.result as string;
        setPreview(result);
        onAvatarChange(result);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <motion.div
      className="relative"
      whileHover={{ scale: 1.05 }}
      transition={{ duration: 0.2 }}
    >
      <div
        className="relative w-32 h-32 rounded-full overflow-hidden cursor-pointer group"
        onMouseEnter={() => setIsHovering(true)}
        onMouseLeave={() => setIsHovering(false)}
        onClick={() => fileInputRef.current?.click()}
      >
        {preview ? (
          <Image src={preview} alt="Avatar" width={96} height={96} className="w-full h-full object-cover" />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center">
            <User className="w-12 h-12 text-white" />
          </div>
        )}
        
        <AnimatePresence>
          {isHovering && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="absolute inset-0 bg-black/50 flex items-center justify-center"
            >
              <Camera className="w-8 h-8 text-white" />
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <motion.div
        className="absolute bottom-0 right-0 w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center shadow-lg cursor-pointer"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => fileInputRef.current?.click()}
      >
        <Upload className="w-5 h-5 text-white" />
      </motion.div>

      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileChange}
        className="hidden"
      />
    </motion.div>
  );
};

// 🎨 Componente Ranch Card Premium
// Definir la interfaz para RanchCard
interface RanchCardProps {
  ranch: any;
  isActive: boolean;
  onEdit: (ranch: any) => void;
  onDelete: (id: string) => void;
  onSetActive: (id: string) => void;
  delay?: number;
}


const RanchCard: React.FC<RanchCardProps> = ({ ranch, isActive, onEdit, onDelete, onSetActive, delay = 0 }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, x: -100 }}
      transition={{ duration: 0.5, delay }}
      className={`group relative p-6 bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 border-2 ${
        isActive ? 'border-green-500' : 'border-gray-100'
      }`}
    >
      {isActive && (
        <div className="absolute -top-2 -right-2">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="w-8 h-8 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center shadow-lg"
          >
            <Check className="w-5 h-5 text-white" />
          </motion.div>
        </div>
      )}

      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-emerald-600 rounded-lg flex items-center justify-center shadow-md">
            <Building2 className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="font-bold text-lg text-gray-900">{ranch.name}</h3>
            <div className="flex items-center space-x-2 text-sm text-gray-600 mt-1">
              <MapPin className="w-4 h-4" />
              <span>{ranch.location}</span>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <p className="text-2xl font-bold text-gray-900">
            {ranch.animalCount || 0}
          </p>
          <p className="text-xs text-gray-600">Animales</p>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <p className="text-2xl font-bold text-gray-900">
            {ranch.size || 0} ha
          </p>
          <p className="text-xs text-gray-600">Tamaño</p>
        </div>
      </div>

      <div className="flex items-center space-x-2">
        {!isActive && (
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => onSetActive(ranch.id)}
            className="flex-1 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg font-medium hover:from-green-600 hover:to-green-700 transition-all duration-200"
          >
            Activar
          </motion.button>
        )}
        
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => onEdit(ranch)}
          className="p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
        >
          <Edit2 className="w-4 h-4 text-gray-600" />
        </motion.button>
        
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => onDelete(ranch.id)}
          className="p-2 bg-gray-100 hover:bg-red-100 rounded-lg transition-colors duration-200 group"
        >
          <Trash2 className="w-4 h-4 text-gray-600 group-hover:text-red-600" />
        </motion.button>
      </div>
    </motion.div>
  );
};

// 🎨 Componente Notification Toggle Premium
// Definir la interfaz para NotificationToggle
interface NotificationToggleProps {
  title: string;
  description: string;
  icon: any;
  enabled: boolean;
  onChange: (enabled: boolean) => void;
}


const NotificationToggle: React.FC<NotificationToggleProps> = ({ title, description, icon: Icon, enabled, onChange }) => {
  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      className="flex items-center justify-between p-4 bg-white rounded-lg border border-gray-200 hover:border-gray-300 transition-colors duration-200"
    >
      <div className="flex items-center space-x-3">
        <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
          <Icon className="w-5 h-5 text-gray-600" />
        </div>
        <div>
          <h4 className="font-medium text-gray-900">{title}</h4>
          <p className="text-sm text-gray-600">{description}</p>
        </div>
      </div>
      
      <motion.button
        onClick={() => onChange(!enabled)}
        className={`relative w-12 h-6 rounded-full transition-colors duration-200 ${
          enabled ? 'bg-gradient-to-r from-green-400 to-green-600' : 'bg-gray-300'
        }`}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <motion.div
          className="absolute top-0.5 w-5 h-5 bg-white rounded-full shadow-md"
          animate={{ left: enabled ? '26px' : '2px' }}
          transition={{ type: 'spring', stiffness: 500, damping: 30 }}
        />
      </motion.button>
    </motion.div>
  );
};

// 🚀 COMPONENTE PRINCIPAL: Profile Page Premium
export default function ProfilePage() {
  // Mock data y state
  const [currentUser, setCurrentUser] = useState({
    id: '1',
    name: 'Juan Pérez',
    email: 'juan@example.com',
    phone: '+1234567890',
    location: 'México'
  });

// Definir la interfaz para Ranch
interface Ranch {
  id: string;
  name: string;
  location: string;
  size: number;
  animalCount: number;
  isActive: boolean;
}


  const [ranches, setRanches] = useState<Ranch[]>([
    { id: '1', name: 'Rancho Principal', location: 'Guadalajara, MX', size: 150, animalCount: 45, isActive: true },
    { id: '2', name: 'Rancho Norte', location: 'Monterrey, MX', size: 200, animalCount: 67, isActive: false }
  ]);

  const [activeRanchId, setActiveRanchId] = useState('1');
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('profile');
  const [profileCompletion, setProfileCompletion] = useState(0);
  
  // Form states
  const [formData, setFormData] = useState({
    name: currentUser?.name || '',
    email: currentUser?.email || '',
    phone: currentUser?.phone || '',
    location: currentUser?.location || '',
    avatar: ''
  });

// Definir la interfaz para NotificationSettings
interface NotificationSettings {
  email: boolean;
  push: boolean;
  sms: boolean;
  weeklyReport: boolean;
  alerts: boolean;
}


  const [notifications, setNotifications] = useState<NotificationSettings>({
    email: true,
    push: false,
    sms: false,
    weeklyReport: true,
    alerts: true
  });

  // Calculate profile completion
  useEffect(() => {
    const fields = [formData.name, formData.email, formData.phone, formData.location, formData.avatar];
    const filledFields = fields.filter(f => f).length;
    const completion = Math.round((filledFields / fields.length) * 100);
    setProfileCompletion(completion);
  }, [formData]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const updatedUser = {
        ...currentUser,
        ...formData,
        updatedAt: new Date()
      };
      
      setCurrentUser(updatedUser);
      setIsLoading(false);
      
      // Show success animation
      alert('✅ Perfil actualizado exitosamente');
      
    } catch (error) {
      console.error('Error al guardar perfil:', error);
      setIsLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50">
      {/* Background effects */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-200 rounded-full blur-3xl opacity-20 animate-pulse" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full blur-3xl opacity-20 animate-pulse" />
      </div>

      <div className="relative z-10 max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex items-center justify-between mb-8"
        >
          <div className="flex items-center space-x-4">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="p-2 bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
            >
              <ArrowLeft className="h-5 w-5 text-gray-600" />
            </motion.button>
            
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Mi <span className="text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-blue-600">Perfil</span>
              </h1>
              <p className="text-gray-600 mt-1">Gestiona tu información y preferencias</p>
            </div>
          </div>

          {/* Profile completion indicator */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="bg-white p-4 rounded-xl shadow-md"
          >
            <div className="flex items-center space-x-3">
              <div className="relative">
                <svg className="w-12 h-12 transform -rotate-90">
                  <circle
                    cx="24"
                    cy="24"
                    r="20"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="none"
                    className="text-gray-200"
                  />
                  <motion.circle
                    cx="24"
                    cy="24"
                    r="20"
                    stroke="url(#gradient)"
                    strokeWidth="4"
                    fill="none"
                    strokeDasharray={126}
                    initial={{ strokeDashoffset: 126 }}
                    animate={{ strokeDashoffset: 126 - (126 * profileCompletion) / 100 }}
                    transition={{ duration: 1, delay: 0.5 }}
                  />
                  <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%" stopColor="#10b981" />
                      <stop offset="100%" stopColor="#3b82f6" />
                    </linearGradient>
                  </defs>
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-sm font-bold">{profileCompletion}%</span>
                </div>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-900">Perfil completo</p>
                <p className="text-xs text-gray-600">
                  {profileCompletion === 100 ? '¡Excelente!' : 'Completa tu perfil'}
                </p>
              </div>
            </div>
          </motion.div>
        </motion.div>

        {/* Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full max-w-2xl mx-auto grid-cols-4 bg-white shadow-md">
            <TabsTrigger value="profile">
              <User className="w-4 h-4 mr-2" />
              Perfil
            </TabsTrigger>
            <TabsTrigger value="ranches">
              <Building2 className="w-4 h-4 mr-2" />
              Ranchos
            </TabsTrigger>
            <TabsTrigger value="notifications">
              <Bell className="w-4 h-4 mr-2" />
              Notificaciones
            </TabsTrigger>
            <TabsTrigger value="billing">
              <CreditCard className="w-4 h-4 mr-2" />
              Billing
            </TabsTrigger>
          </TabsList>

          {/* Tab: Perfil */}
          <TabsContent value="profile" activeTab={activeTab}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="shadow-xl border-0">
                <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                  <CardTitle>Información Personal</CardTitle>
                  <CardDescription>
                    Actualiza tu información para personalizar tu experiencia en RanchOS
                  </CardDescription>
                </CardHeader>
                <CardContent className="p-8">
                  <div className="space-y-6">
                    {/* Avatar Upload */}
                    <div className="flex justify-center mb-8">
                      <AvatarUpload 
                        currentAvatar={formData.avatar}
                        onAvatarChange={(url) => setFormData({ ...formData, avatar: url })}
                      />
                    </div>

                    <div className="grid gap-6 md:grid-cols-2">
                      <motion.div
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: 0.1 }}
                        className="space-y-2"
                      >
                        <Label htmlFor="name" className="flex items-center space-x-2">
                          <User className="w-4 h-4 text-gray-500" />
                          <span>Nombre completo</span>
                        </Label>
                        <div className="relative">
                          <Input
                            id="name"
                            name="name"
                            placeholder="Juan Pérez"
                            value={formData.name}
                            onChange={handleChange}
                            required
                            className="pl-10 pr-10 h-12 border-gray-200 focus:border-green-500"
                          />
                          <User className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                          {formData.name && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="absolute right-3 top-1/2 -translate-y-1/2"
                            >
                              <Check className="w-4 h-4 text-green-500" />
                            </motion.div>
                          )}
                        </div>
                      </motion.div>

                      <motion.div
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: 0.2 }}
                        className="space-y-2"
                      >
                        <Label htmlFor="email" className="flex items-center space-x-2">
                          <Mail className="w-4 h-4 text-gray-500" />
                          <span>Correo electrónico</span>
                        </Label>
                        <div className="relative">
                          <Input
                            id="email"
                            name="email"
                            type="email"
                            placeholder="juan@example.com"
                            value={formData.email}
                            onChange={handleChange}
                            required
                            className="pl-10 pr-10 h-12 border-gray-200 focus:border-green-500"
                          />
                          <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                          {formData.email && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="absolute right-3 top-1/2 -translate-y-1/2"
                            >
                              <Check className="w-4 h-4 text-green-500" />
                            </motion.div>
                          )}
                        </div>
                      </motion.div>

                      <motion.div
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: 0.3 }}
                        className="space-y-2"
                      >
                        <Label htmlFor="phone" className="flex items-center space-x-2">
                          <Phone className="w-4 h-4 text-gray-500" />
                          <span>Teléfono</span>
                        </Label>
                        <div className="relative">
                          <Input
                            id="phone"
                            name="phone"
                            type="tel"
                            placeholder="+1234567890"
                            value={formData.phone}
                            onChange={handleChange}
                            className="pl-10 pr-10 h-12 border-gray-200 focus:border-green-500"
                          />
                          <Phone className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                          {formData.phone && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="absolute right-3 top-1/2 -translate-y-1/2"
                            >
                              <Check className="w-4 h-4 text-green-500" />
                            </motion.div>
                          )}
                        </div>
                      </motion.div>

                      <motion.div
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: 0.4 }}
                        className="space-y-2"
                      >
                        <Label htmlFor="location" className="flex items-center space-x-2">
                          <MapPin className="w-4 h-4 text-gray-500" />
                          <span>Ubicación</span>
                        </Label>
                        <div className="relative">
                          <Input
                            id="location"
                            name="location"
                            placeholder="Ciudad, País"
                            value={formData.location}
                            onChange={handleChange}
                            className="pl-10 pr-10 h-12 border-gray-200 focus:border-green-500"
                          />
                          <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                          {formData.location && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="absolute right-3 top-1/2 -translate-y-1/2"
                            >
                              <Check className="w-4 h-4 text-green-500" />
                            </motion.div>
                          )}
                        </div>
                      </motion.div>
                    </div>

                    {/* Action buttons */}
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: 0.5 }}
                      className="flex gap-3 pt-6"
                    >
                      <Button
                        variant="outline"
                        className="flex-1 h-12"
                      >
                        Cancelar
                      </Button>
                      <Button
                        onClick={handleSubmit}
                        disabled={isLoading}
                        className="flex-1 h-12 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
                      >
                        {isLoading ? (
                          <div className="flex items-center space-x-2">
                            <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                            <span>Guardando...</span>
                          </div>
                        ) : (
                          <>
                            <Save className="h-4 w-4 mr-2" />
                            Guardar cambios
                          </>
                        )}
                      </Button>
                    </motion.div>
                  </div>
                </CardContent>
              </Card>

              {/* Security section */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                <Card className="shadow-xl border-0 mt-6">
                  <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                    <CardTitle className="flex items-center space-x-2">
                      <Shield className="w-5 h-5 text-gray-600" />
                      <span>Seguridad</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-6 space-y-4">
                    <button className="w-full p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 flex items-center justify-between group">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-white rounded-lg flex items-center justify-center shadow-sm">
                          <Shield className="w-5 h-5 text-gray-600" />
                        </div>
                        <div className="text-left">
                          <h4 className="font-medium text-gray-900">Cambiar contraseña</h4>
                          <p className="text-sm text-gray-600">Última actualización hace 3 meses</p>
                        </div>
                      </div>
                      <ChevronRight className="w-5 h-5 text-gray-400 group-hover:text-gray-600" />
                    </button>

                    <button className="w-full p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 flex items-center justify-between group">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-white rounded-lg flex items-center justify-center shadow-sm">
                          <Zap className="w-5 h-5 text-gray-600" />
                        </div>
                        <div className="text-left">
                          <h4 className="font-medium text-gray-900">Autenticación de dos factores</h4>
                          <p className="text-sm text-gray-600">No configurada</p>
                        </div>
                      </div>
                      <ChevronRight className="w-5 h-5 text-gray-400 group-hover:text-gray-600" />
                    </button>
                  </CardContent>
                </Card>
              </motion.div>
            </motion.div>
          </TabsContent>

          {/* Tab: Ranchos */}
          <TabsContent value="ranches" activeTab={activeTab}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="shadow-xl border-0">
                <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle>Mis Ranchos</CardTitle>
                      <CardDescription>
                        Gestiona tus ranchos y selecciona el activo
                      </CardDescription>
                    </div>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200"
                    >
                      <Plus className="w-4 h-4 inline mr-2" />
                      Nuevo Rancho
                    </motion.button>
                  </div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                    {ranches.map((ranch, index) => (
                      <RanchCard
                        key={ranch.id}
                        ranch={ranch}
                        isActive={ranch.id === activeRanchId}
                        onEdit={(ranch: Ranch) => console.log('Edit ranch', ranch)}
                        onDelete={(id: string) => setRanches(ranches.filter(r => r.id !== id))}
                        onSetActive={(id: string) => setActiveRanchId(id)}
                        delay={index * 0.1}
                      />
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Ranch statistics */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6"
              >
                <Card className="shadow-lg border-0">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center">
                        <Building2 className="w-6 h-6 text-white" />
                      </div>
                      <Badge className="bg-blue-100 text-blue-700">Total</Badge>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900">{ranches.length}</h3>
                    <p className="text-sm text-gray-600 mt-1">Ranchos registrados</p>
                  </CardContent>
                </Card>

                <Card className="shadow-lg border-0">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-lg flex items-center justify-center">
                        <Users className="w-6 h-6 text-white" />
                      </div>
                      <Badge className="bg-green-100 text-green-700">Animales</Badge>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900">
                      {ranches.reduce((sum, r) => sum + r.animalCount, 0)}
                    </h3>
                    <p className="text-sm text-gray-600 mt-1">Total de animales</p>
                  </CardContent>
                </Card>

                <Card className="shadow-lg border-0">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-lg flex items-center justify-center">
                        <MapPin className="w-6 h-6 text-white" />
                      </div>
                      <Badge className="bg-purple-100 text-purple-700">Área</Badge>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900">
                      {ranches.reduce((sum, r) => sum + (r.size || 0), 0)} ha
                    </h3>
                    <p className="text-sm text-gray-600 mt-1">Área total</p>
                  </CardContent>
                </Card>
              </motion.div>
            </motion.div>
          </TabsContent>

          {/* Tab: Notificaciones */}
          <TabsContent value="notifications" activeTab={activeTab}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="shadow-xl border-0">
                <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                  <CardTitle>Preferencias de Notificaciones</CardTitle>
                  <CardDescription>
                    Controla cómo y cuándo recibir actualizaciones de RanchOS
                  </CardDescription>
                </CardHeader>
                <CardContent className="p-6 space-y-4">
                  <NotificationToggle
                    title="Notificaciones por Email"
                    description="Recibe actualizaciones importantes en tu correo"
                    icon={Mail}
                    enabled={notifications.email}
                    onChange={(value) => setNotifications({ ...notifications, email: value })}
                  />
                  
                  <NotificationToggle
                    title="Notificaciones Push"
                    description="Alertas instantáneas en tu navegador"
                    icon={Bell}
                    enabled={notifications.push}
                    onChange={(value) => setNotifications({ ...notifications, push: value })}
                  />
                  
                  <NotificationToggle
                    title="SMS"
                    description="Mensajes de texto para alertas críticas"
                    icon={Phone}
                    enabled={notifications.sms}
                    onChange={(value) => setNotifications({ ...notifications, sms: value })}
                  />
                  
                  <div className="border-t pt-4">
                    <h4 className="font-medium text-gray-900 mb-4">Tipos de notificaciones</h4>
                    
                    <div className="space-y-4 mt-4">
                      <NotificationToggle
                        title="Reportes semanales"
                        description="Resumen de actividad y métricas cada semana"
                        icon={Clock}
                        enabled={notifications.weeklyReport}
                        onChange={(value) => setNotifications({ ...notifications, weeklyReport: value })}
                      />
                      
                      <NotificationToggle
                        title="Alertas de salud"
                        description="Notificaciones sobre el estado de salud del ganado"
                        icon={AlertCircle}
                        enabled={notifications.alerts}
                        onChange={(value) => setNotifications({ ...notifications, alerts: value })}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>

          {/* Tab: Billing */}
          <TabsContent value="billing" activeTab={activeTab}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="shadow-xl border-0">
                <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                  <CardTitle>Plan y Facturación</CardTitle>
                  <CardDescription>
                    Gestiona tu suscripción y métodos de pago
                  </CardDescription>
                </CardHeader>
                <CardContent className="p-6">
                  {/* Current plan */}
                  <div className="p-6 bg-gradient-to-br from-green-50 to-blue-50 rounded-xl mb-6">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-bold text-gray-900">Plan Premium</h3>
                        <p className="text-sm text-gray-600">Acceso completo a todas las funciones</p>
                      </div>
                      <Badge className="bg-gradient-to-r from-green-500 to-green-600 text-white">
                        Activo
                      </Badge>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="text-center">
                        <p className="text-2xl font-bold text-gray-900">∞</p>
                        <p className="text-xs text-gray-600">Ranchos</p>
                      </div>
                      <div className="text-center">
                        <p className="text-2xl font-bold text-gray-900">∞</p>
                        <p className="text-xs text-gray-600">Animales</p>
                      </div>
                      <div className="text-center">
                        <p className="text-2xl font-bold text-gray-900">24/7</p>
                        <p className="text-xs text-gray-600">Soporte</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                      <div>
                        <p className="text-sm text-gray-600">Próxima facturación</p>
                        <p className="font-medium text-gray-900">1 de enero, 2025</p>
                      </div>
                      <p className="text-2xl font-bold text-gray-900">$99/mes</p>
                    </div>
                  </div>

                  {/* Payment method */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">Método de pago</h4>
                    <div className="p-4 bg-gray-50 rounded-lg flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-12 h-8 bg-gradient-to-r from-blue-600 to-blue-800 rounded flex items-center justify-center">
                          <CreditCard className="w-6 h-4 text-white" />
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">•••• •••• •••• 4242</p>
                          <p className="text-sm text-gray-600">Expira 12/25</p>
                        </div>
                      </div>
                      <Button variant="outline" className="text-sm py-1 px-3">
                        Cambiar
                      </Button>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="mt-6 pt-6 border-t space-y-3">
                    <Button variant="outline" className="w-full">
                      <Settings className="w-4 h-4 mr-2" />
                      Gestionar suscripción
                    </Button>
                    <Button variant="outline" className="w-full text-red-600 hover:text-red-700">
                      <LogOut className="w-4 h-4 mr-2" />
                      Cancelar suscripción
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Billing history */}
              <Card className="shadow-xl border-0 mt-6">
                <CardHeader className="bg-gradient-to-r from-gray-50 to-white">
                  <CardTitle>Historial de facturación</CardTitle>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="space-y-3">
                    {[
                      { date: 'Dic 1, 2024', amount: '$99.00', status: 'paid' },
                      { date: 'Nov 1, 2024', amount: '$99.00', status: 'paid' },
                      { date: 'Oct 1, 2024', amount: '$99.00', status: 'paid' },
                    ].map((invoice, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: index * 0.1 }}
                        className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors duration-200"
                      >
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-white rounded-lg flex items-center justify-center shadow-sm">
                            <File className="w-5 h-5 text-gray-600" />
                          </div>
                          <div>
                            <p className="font-medium text-gray-900">{invoice.date}</p>
                            <p className="text-sm text-gray-600">Factura mensual</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-3">
                          <Badge className="bg-green-100 text-green-700">Pagado</Badge>
                          <p className="font-medium text-gray-900">{invoice.amount}</p>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}